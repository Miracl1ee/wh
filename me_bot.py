<<<<<<< HEAD
import telebot
from file_format import FileFormat
from database import Database
from keyboard import keyboard, exit_keyboard, delete_keyboard
from settings import TOKEN
bot = telebot.TeleBot(TOKEN)
file_Manager = FileFormat()
db = Database()
user_states = {}


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç!üòÅ  –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard())


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id

    if call.data == 'csv':
        user_states[chat_id] = 'waiting_for_csv'
        bot.send_message(
            chat_id,
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ CSV üìÉ...",
            reply_markup=exit_keyboard())

    elif call.data == 'xlsx':
        user_states[chat_id] = 'waiting_for_xlsx'
        bot.send_message(
            chat_id,
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ XLSX üìÉ...",
            reply_markup=exit_keyboard())

    elif call.data == 'db':
        bot.send_message(
            chat_id,
            "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b><i>–≤—Å–µ –≤–∞—à–∏</i></b> –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö? üóëÔ∏è",
            reply_markup=delete_keyboard(), parse_mode="HTML")

    elif call.data == 'Yes':
        username = f"@{call.from_user.username}"
        db.delete_all(username)
        bot.send_message(
            chat_id,
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ <i>–≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i> —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. üóëÔ∏è‚úîÔ∏è",
            parse_mode="HTML")
        user_states[chat_id] = 'waiting_for_db'
        bot.send_message(
            chat_id,
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è üìÉ...",
            reply_markup=exit_keyboard())

    elif call.data == 'No':
        user_states[chat_id] = 'waiting_for_db'
        bot.send_message(
            chat_id,
            "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö üìÉ...",
            reply_markup=exit_keyboard())

    elif call.data == 'search':
        user_name = f"@{call.from_user.username}"
        user_states[chat_id] = 'waiting_for_search'
        bot.send_message(
            chat_id,
            f"–í–∞—à–µ –∏–º—è: {user_name}\n–î–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.üìÉ\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å <b><i>–≤—Å–µ –∑–∞–¥–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i></b>, –≤–≤–µ–¥–∏—Ç–µ ¬´ # ¬ª",
            parse_mode="HTML")

    elif call.data == 'exit':
        if chat_id in user_states:
            del user_states[chat_id]  # –≤—ã—Ö–æ–¥ –∏–∑ –≤—Å—è–∫–∏—Ö —É—Å–ª–æ–≤–∏–π
        bot.send_message(
            chat_id,
            "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úîÔ∏è, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–ª—å—à–µ üìÉ...",
            reply_markup=keyboard())


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        return
    if user_states[chat_id] == 'waiting_for_csv':
        file_Manager.write_to_csv(message.text)
        bot.send_message(
            chat_id,
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ CSV ‚úîÔ∏è: ¬´{message.text}¬ª",
            reply_markup=exit_keyboard())

    elif user_states[chat_id] == 'waiting_for_xlsx':
        file_Manager.write_to_xlsx([message.text])
        bot.send_message(
            chat_id,
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ XLSX ‚úîÔ∏è: ¬´{message.text}¬ª",
            reply_markup=exit_keyboard())

    elif user_states[chat_id] == 'waiting_for_db':
        username = f"@{message.from_user.username}"

        db.add_homework(username, message.text)
        bot.send_message(
            chat_id,
            f"–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ: ¬´{message.text}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úîÔ∏è",
            reply_markup=exit_keyboard())

    elif user_states[chat_id] == 'waiting_for_search':
        search = message.text.strip()
        user_name = f"@{message.from_user.username}"
        if search == "#":
            results = db.search_all(user_name)
        else:
            results = db.search_with_user_and_text(user_name, search)
        if not results:
            bot.send_message(
                chat_id,
                f"–ó–∞–¥–∞–Ω–∏–π –æ—Ç <b>{user_name}</b> –ø–æ –∑–∞–ø—Ä–æ—Å—É: <i>¬´{search}¬ª</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚ùå",
                reply_markup=exit_keyboard(),
                parse_mode="HTML")
        else:
            bot.send_message(
                chat_id,
                f"<b>–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –æ—Ç {user_name}: {len(results)} üîç</b>",
                reply_markup = exit_keyboard(), parse_mode="HTML")
            for row in results:
                bot.send_message(
                    chat_id,
                    f"üì£<b>ID:</b> {row[0]}\nüë§<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {row[1]}\nüìå<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {row[2]}", parse_mode="HTML")


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
=======
import telebot
from file_format import FileFormat
from database import Database
from keyboard import keyboard, exit_keyboard, delete_keyboard
from settings import TOKEN
bot = telebot.TeleBot(TOKEN)
file_Manager = FileFormat()
db = Database()
user_states = {}


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç!üòÅ  –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard())


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    chat_id = call.message.chat.id

    if call.data == 'csv':
        user_states[chat_id] = 'waiting_for_csv'
        bot.send_message(
            chat_id,
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ CSV üìÉ...",
            reply_markup=exit_keyboard())

    elif call.data == 'xlsx':
        user_states[chat_id] = 'waiting_for_xlsx'
        bot.send_message(
            chat_id,
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ XLSX üìÉ...",
            reply_markup=exit_keyboard())

    elif call.data == 'db':
        bot.send_message(
            chat_id,
            "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b><i>–≤—Å–µ –≤–∞—à–∏</i></b> –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö? üóëÔ∏è",
            reply_markup=delete_keyboard(), parse_mode="HTML")

    elif call.data == 'Yes':
        username = f"@{call.from_user.username}"
        db.delete_all(username)
        bot.send_message(
            chat_id,
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ <i>–≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i> —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. üóëÔ∏è‚úîÔ∏è",
            parse_mode="HTML")
        user_states[chat_id] = 'waiting_for_db'
        bot.send_message(
            chat_id,
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è üìÉ...",
            reply_markup=exit_keyboard())

    elif call.data == 'No':
        user_states[chat_id] = 'waiting_for_db'
        bot.send_message(
            chat_id,
            "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö üìÉ...",
            reply_markup=exit_keyboard())

    elif call.data == 'search':
        user_name = f"@{call.from_user.username}"
        user_states[chat_id] = 'waiting_for_search'
        bot.send_message(
            chat_id,
            f"–í–∞—à–µ –∏–º—è: {user_name}\n–î–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.üìÉ\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å <b><i>–≤—Å–µ –∑–∞–¥–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i></b>, –≤–≤–µ–¥–∏—Ç–µ ¬´ # ¬ª",
            parse_mode="HTML")

    elif call.data == 'exit':
        if chat_id in user_states:
            del user_states[chat_id]  # –≤—ã—Ö–æ–¥ –∏–∑ –≤—Å—è–∫–∏—Ö —É—Å–ª–æ–≤–∏–π
        bot.send_message(
            chat_id,
            "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úîÔ∏è, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–ª—å—à–µ üìÉ...",
            reply_markup=keyboard())


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        return
    if user_states[chat_id] == 'waiting_for_csv':
        file_Manager.write_to_csv(message.text)
        bot.send_message(
            chat_id,
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ CSV ‚úîÔ∏è: ¬´{message.text}¬ª",
            reply_markup=exit_keyboard())

    elif user_states[chat_id] == 'waiting_for_xlsx':
        file_Manager.write_to_xlsx([message.text])
        bot.send_message(
            chat_id,
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ XLSX ‚úîÔ∏è: ¬´{message.text}¬ª",
            reply_markup=exit_keyboard())

    elif user_states[chat_id] == 'waiting_for_db':
        username = f"@{message.from_user.username}"

        db.add_homework(username, message.text)
        bot.send_message(
            chat_id,
            f"–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ: ¬´{message.text}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úîÔ∏è",
            reply_markup=exit_keyboard())

    elif user_states[chat_id] == 'waiting_for_search':
        search = message.text.strip()
        user_name = f"@{message.from_user.username}"
        if search == "#":
            results = db.search_all(user_name)
        else:
            results = db.search_with_user_and_text(user_name, search)
        if not results:
            bot.send_message(
                chat_id,
                f"–ó–∞–¥–∞–Ω–∏–π –æ—Ç <b>{user_name}</b> –ø–æ –∑–∞–ø—Ä–æ—Å—É: <i>¬´{search}¬ª</i> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚ùå",
                reply_markup=exit_keyboard(),
                parse_mode="HTML")
        else:
            bot.send_message(
                chat_id,
                f"<b>–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –æ—Ç {user_name}: {len(results)} üîç</b>",
                reply_markup = exit_keyboard(), parse_mode="HTML")
            for row in results:
                bot.send_message(
                    chat_id,
                    f"üì£<b>ID:</b> {row[0]}\nüë§<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {row[1]}\nüìå<b>–ó–∞–¥–∞–Ω–∏–µ:</b> {row[2]}", parse_mode="HTML")


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
>>>>>>> a9f594b995eb050cb5db63099ae58e515d2999b4
